
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresLexicoSintactico;

import java_cup.runtime.*;
import Instrucciones.ArbolSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\010\000\002\006\006\000\002\006\006\000\002" +
    "\004\015\000\002\004\015\000\002\007\005\000\002\011" +
    "\005\000\002\011\003\000\002\004\012\000\002\004\015" +
    "\000\002\004\015\000\002\005\012\000\002\005\012\000" +
    "\002\005\012\000\002\004\014\000\002\010\004\000\002" +
    "\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\035\005\001\002\000\004\002\151\001" +
    "\002\000\012\004\006\025\012\026\010\034\013\001\002" +
    "\000\004\010\137\001\002\000\014\004\006\025\012\026" +
    "\010\034\013\036\135\001\002\000\004\017\077\001\002" +
    "\000\014\004\ufffe\025\ufffe\026\ufffe\034\ufffe\036\ufffe\001" +
    "\002\000\004\010\055\001\002\000\004\010\014\001\002" +
    "\000\004\005\015\001\002\000\004\010\016\001\002\000" +
    "\004\010\017\001\002\000\004\033\020\001\002\000\004" +
    "\011\021\001\002\000\004\007\022\001\002\000\004\015" +
    "\024\001\002\000\004\006\053\001\002\000\020\027\025" +
    "\030\032\031\026\032\035\033\031\037\030\040\033\001" +
    "\002\000\014\006\ufffb\007\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\001\002\000\014\006\ufffc\007\ufffc\016\ufffc\020\ufffc\021" +
    "\ufffc\001\002\000\006\016\051\021\050\001\002\000\004" +
    "\017\043\001\002\000\014\006\ufff9\007\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\001\002\000\014\006\ufffd\007\ufffd\016\ufffd" +
    "\020\ufffd\021\ufffd\001\002\000\004\017\036\001\002\000" +
    "\010\006\ufff1\016\ufff1\021\ufff1\001\002\000\014\006\ufffa" +
    "\007\ufffa\016\ufffa\020\ufffa\021\ufffa\001\002\000\022\015" +
    "\024\027\025\030\032\031\026\032\035\033\031\037\030" +
    "\040\033\001\002\000\004\020\042\001\002\000\004\020" +
    "\041\001\002\000\014\006\ufff7\007\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\001\002\000\014\006\ufff6\007\ufff6\016\ufff6\020" +
    "\ufff6\021\ufff6\001\002\000\020\027\025\030\032\031\026" +
    "\032\035\033\031\037\030\040\033\001\002\000\004\021" +
    "\045\001\002\000\020\027\025\030\032\031\026\032\035" +
    "\033\031\037\030\040\033\001\002\000\004\020\047\001" +
    "\002\000\014\006\ufff8\007\ufff8\016\ufff8\020\ufff8\021\ufff8" +
    "\001\002\000\020\027\025\030\032\031\026\032\035\033" +
    "\031\037\030\040\033\001\002\000\006\006\ufff3\020\ufff3" +
    "\001\002\000\010\006\ufff2\016\ufff2\021\ufff2\001\002\000" +
    "\004\012\054\001\002\000\014\004\ufff4\025\ufff4\026\ufff4" +
    "\034\ufff4\036\ufff4\001\002\000\004\010\056\001\002\000" +
    "\006\023\057\024\060\001\002\000\004\013\073\001\002" +
    "\000\004\013\061\001\002\000\020\027\025\030\032\031" +
    "\026\032\035\033\031\037\030\040\033\001\002\000\004" +
    "\007\063\001\002\000\004\014\064\001\002\000\022\015" +
    "\024\027\025\030\032\031\026\032\035\033\031\037\030" +
    "\040\033\001\002\000\004\006\071\001\002\000\004\006" +
    "\067\001\002\000\004\012\070\001\002\000\014\004\uffee" +
    "\025\uffee\026\uffee\034\uffee\036\uffee\001\002\000\004\012" +
    "\072\001\002\000\014\004\uffef\025\uffef\026\uffef\034\uffef" +
    "\036\uffef\001\002\000\020\027\025\030\032\031\026\032" +
    "\035\033\031\037\030\040\033\001\002\000\006\006\075" +
    "\021\050\001\002\000\004\012\076\001\002\000\014\004" +
    "\ufff0\025\ufff0\026\ufff0\034\ufff0\036\ufff0\001\002\000\006" +
    "\041\100\042\102\001\002\000\004\010\123\001\002\000" +
    "\010\022\uffe8\041\uffe8\042\uffe8\001\002\000\004\010\114" +
    "\001\002\000\010\022\105\041\100\042\102\001\002\000" +
    "\010\022\uffe9\041\uffe9\042\uffe9\001\002\000\004\026\106" +
    "\001\002\000\004\006\107\001\002\000\004\012\110\001" +
    "\002\000\004\020\111\001\002\000\004\006\112\001\002" +
    "\000\004\012\113\001\002\000\014\004\uffea\025\uffea\026" +
    "\uffea\034\uffea\036\uffea\001\002\000\004\010\115\001\002" +
    "\000\004\005\116\001\002\000\004\013\117\001\002\000" +
    "\020\027\025\030\032\031\026\032\035\033\031\037\030" +
    "\040\033\001\002\000\004\006\121\001\002\000\004\012" +
    "\122\001\002\000\010\022\uffed\041\uffed\042\uffed\001\002" +
    "\000\004\010\124\001\002\000\004\005\125\001\002\000" +
    "\004\013\126\001\002\000\022\015\024\027\025\030\032" +
    "\031\026\032\035\033\031\037\030\040\033\001\002\000" +
    "\004\006\133\001\002\000\004\006\131\001\002\000\004" +
    "\012\132\001\002\000\010\022\uffec\041\uffec\042\uffec\001" +
    "\002\000\004\012\134\001\002\000\010\022\uffeb\041\uffeb" +
    "\042\uffeb\001\002\000\004\002\000\001\002\000\014\004" +
    "\uffff\025\uffff\026\uffff\034\uffff\036\uffff\001\002\000\004" +
    "\005\140\001\002\000\004\010\141\001\002\000\004\010" +
    "\142\001\002\000\004\032\143\001\002\000\004\011\144" +
    "\001\002\000\004\007\145\001\002\000\020\027\025\030" +
    "\032\031\026\032\035\033\031\037\030\040\033\001\002" +
    "\000\004\006\147\001\002\000\004\012\150\001\002\000" +
    "\014\004\ufff5\025\ufff5\026\ufff5\034\ufff5\036\ufff5\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\006\004\010\001\001\000\002\001\001\000\004" +
    "\004\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\022\001\001\000\002" +
    "\001\001\000\006\006\033\011\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\036\007\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\043\001\001\000\002" +
    "\001\001\000\004\006\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\064\007\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\033" +
    "\011\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\100\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\126\007\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        public void syntax_error(Symbol s){
            System.out.println("Error Sintactico: "+s.value+" , Linea: "+s.left+" Columna: "+s.right);
        }
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error SintActico unrecovered: "+s.value+" , linea: "+s.left+" columna: "+s.right);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico start_val = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END_PROGRAM 
            {
              ArbolSintactico RESULT =null;
		int programleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int programright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object program = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico sentencias = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int end_programleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int end_programright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object end_program = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico inicio = new ArbolSintactico("Inicio");
    inicio.AgregarHijo(new ArbolSintactico(program.toString()));
    inicio.AgregarHijo(sentencias);
    inicio.AgregarHijo(new ArbolSintactico(end_program.toString()));
    RESULT = inicio;   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones declaracion 
            {
              ArbolSintactico RESULT =null;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico sentencias = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico sentencia = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaraciones = new ArbolSintactico("Declaracion");
    declaraciones.AgregarHijo(sentencias);
    declaraciones.AgregarHijo(sentencia);
    RESULT = declaraciones;
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion 
            {
              ArbolSintactico RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico sentencia = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaraciones = new ArbolSintactico("Declaracion");
    declaraciones.AgregarHijo(sentencia);
    RESULT = declaraciones;
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valor_variable ::= ENTERO 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(valor1.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // valor_variable ::= DECIMAL 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(valor1.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valor_variable ::= CADENA 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(valor1.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valor_variable ::= EXPRESION 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(valor1.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor_variable ::= EXPRESION_ARRAY 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(valor1.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor_variable ::= ARITMETICA PARENTESIS_IZQUIERDO valor_variable COMA valor_variable PARENTESIS_DERECHO 
            {
              ArbolSintactico RESULT =null;
		int aritmeticaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aritmeticaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object aritmetica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int parentesis_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parentesis_izquierdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object parentesis_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArbolSintactico valor1 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico valor2 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis_derecholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis_derechoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis_derecho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(aritmetica.toString()));
    valor.AgregarHijo(new ArbolSintactico(parentesis_izquierdo.toString()));
    valor.AgregarHijo(valor1);
    valor.AgregarHijo(new ArbolSintactico(coma.toString()));
    valor.AgregarHijo(valor2);
    valor.AgregarHijo(new ArbolSintactico(parentesis_derecho.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor_variable ::= ESTADISTICA PARENTESIS_IZQUIERDO contenido_array PARENTESIS_DERECHO 
            {
              ArbolSintactico RESULT =null;
		int estadisticaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int estadisticaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object estadistica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parentesis_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parentesis_izquierdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parentesis_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico contenido = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis_derecholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis_derechoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis_derecho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(estadistica.toString()));
    valor.AgregarHijo(new ArbolSintactico(parentesis_izquierdo.toString()));
    valor.AgregarHijo(contenido);
    valor.AgregarHijo(new ArbolSintactico(parentesis_derecho.toString()));
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor_variable ::= ESTADISTICA PARENTESIS_IZQUIERDO valor_variable PARENTESIS_DERECHO 
            {
              ArbolSintactico RESULT =null;
		int estadisticaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int estadisticaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object estadistica = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parentesis_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parentesis_izquierdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object parentesis_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico valor2 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parentesis_derecholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesis_derechoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object parentesis_derecho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("valor Variable");
    valor.AgregarHijo(new ArbolSintactico(estadistica.toString()));
    valor.AgregarHijo(valor2);
    RESULT = valor;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= VAR DOS_PUNTOS TIPO_VARIABLE DOS_PUNTOS DOS_PUNTOS EXPRESION MENOR_QUE MENOS valor_variable END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipo_variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipo_variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo_variable = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menor_queleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menor_queright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor_que = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico valor = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Variable");
    declaracion.AgregarHijo(new ArbolSintactico(var.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(tipo_variable.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos3.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(expresion.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(menor_que.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(menos.toString()));
    declaracion.AgregarHijo(valor);
    declaracion.AgregarHijo(new ArbolSintactico(end.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = declaracion; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= ARRAY DOS_PUNTOS TIPO_VARIABLE DOS_PUNTOS DOS_PUNTOS EXPRESION_ARRAY MENOR_QUE MENOS contenido_array END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipo_variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tipo_variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo_variable = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresion_arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expresion_arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expresion_array = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menor_queleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menor_queright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menor_que = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico contenido = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Arreglo");
    declaracion.AgregarHijo(new ArbolSintactico(array.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(tipo_variable.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos3.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(expresion_array.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(menor_que.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(menos.toString()));
    declaracion.AgregarHijo(contenido);
    declaracion.AgregarHijo(new ArbolSintactico(end.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = declaracion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenido_array ::= CORCHETE_IZQUIERDO lista_array CORCHETE_DERECHO 
            {
              ArbolSintactico RESULT =null;
		int corchete_izquierdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int corchete_izquierdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object corchete_izquierdo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico lista = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int corchete_derecholeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int corchete_derechoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object corchete_derecho = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido_array = new ArbolSintactico("Contenido Array");
    contenido_array.AgregarHijo(new ArbolSintactico(corchete_izquierdo.toString()));
    contenido_array.AgregarHijo(lista);
    contenido_array.AgregarHijo(new ArbolSintactico(corchete_derecho.toString()));
    RESULT = contenido_array;
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_array ::= lista_array COMA valor_variable 
            {
              ArbolSintactico RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico lista = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico valor_var = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico lista_array = new ArbolSintactico("Lista Array");
    lista_array.AgregarHijo(lista);
    lista_array.AgregarHijo(new ArbolSintactico(coma.toString()));
    lista_array.AgregarHijo(valor_var);
    RESULT = lista_array;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_array",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_array ::= valor_variable 
            {
              ArbolSintactico RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico valor1 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico valor = new ArbolSintactico("Lista Array");
    valor.AgregarHijo(valor1);
    RESULT = valor;   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_array",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL lista_array END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int consoleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int consoleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object console = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int printleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int printright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object print = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico lista = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Imprimir");
    declaracion.AgregarHijo(new ArbolSintactico(console.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(print.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(igual.toString()));
    declaracion.AgregarHijo(lista);
    declaracion.AgregarHijo(new ArbolSintactico(end.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = declaracion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL valor_variable MENOS MAYOR_QUE valor_variable END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int consoleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int consoleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object console = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int columnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object column = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valor_var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int valor_var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArbolSintactico valor_var1 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mayor_queleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mayor_queright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object mayor_que = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valor_var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico valor_var2 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Imprimir");
    declaracion.AgregarHijo(new ArbolSintactico(console.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(column.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(igual.toString()));
    declaracion.AgregarHijo(valor_var1);
    declaracion.AgregarHijo(new ArbolSintactico(menos.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(mayor_que.toString()));
    declaracion.AgregarHijo(valor_var2);
    declaracion.AgregarHijo(new ArbolSintactico(end.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = declaracion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= CONSOLE DOS_PUNTOS DOS_PUNTOS COLUMN IGUAL valor_variable MENOS MAYOR_QUE contenido_array END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int valor_var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int valor_var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArbolSintactico valor_var1 = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico contenido = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Imprimir");
    declaracion.AgregarHijo(valor_var1);
    declaracion.AgregarHijo(contenido);
    RESULT = declaracion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_grafica ::= TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS TIPO_VARIABLE IGUAL valor_variable END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipo_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipo_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipo_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valor_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico valor_val = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido = new ArbolSintactico("Contenido Grafica");
    contenido.AgregarHijo(new ArbolSintactico(titulo.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    contenido.AgregarHijo(new ArbolSintactico(tipo_val.toString()));
    contenido.AgregarHijo(new ArbolSintactico(igual.toString()));
    contenido.AgregarHijo(valor_val);
    contenido.AgregarHijo(new ArbolSintactico(end.toString()));
    contenido.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = contenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_grafica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_grafica ::= TITULO_EJE DOS_PUNTOS DOS_PUNTOS TIPO_VARIABLE IGUAL contenido_array END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipo_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipo_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipo_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valor_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico valor_val = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido = new ArbolSintactico("Contenido Grafica");
    contenido.AgregarHijo(new ArbolSintactico(titulo.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    contenido.AgregarHijo(new ArbolSintactico(tipo_val.toString()));
    contenido.AgregarHijo(new ArbolSintactico(igual.toString()));
    contenido.AgregarHijo(valor_val);
    contenido.AgregarHijo(new ArbolSintactico(end.toString()));
    contenido.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = contenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_grafica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_grafica ::= TITULO_EJE DOS_PUNTOS DOS_PUNTOS TIPO_VARIABLE IGUAL valor_variable END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dos_puntos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dos_puntos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dos_puntos1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dos_puntos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dos_puntos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object dos_puntos2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipo_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tipo_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object tipo_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valor_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArbolSintactico valor_val = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido = new ArbolSintactico("Contenido Grafica");
    contenido.AgregarHijo(new ArbolSintactico(titulo.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos1.toString()));
    contenido.AgregarHijo(new ArbolSintactico(dos_puntos2.toString()));
    contenido.AgregarHijo(new ArbolSintactico(tipo_val.toString()));
    contenido.AgregarHijo(new ArbolSintactico(igual.toString()));
    contenido.AgregarHijo(valor_val);
    contenido.AgregarHijo(new ArbolSintactico(end.toString()));
    contenido.AgregarHijo(new ArbolSintactico(punto_coma.toString()));
    RESULT = contenido;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_grafica",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= TIPO_GRAFICA PARENTESIS_IZQUIERDO contenido_grafica EXEC TIPO_GRAFICA END PUNTO_COMA PARENTESIS_DERECHO END PUNTO_COMA 
            {
              ArbolSintactico RESULT =null;
		int tipo_grafica1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tipo_grafica1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tipo_grafica1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int par_izleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int par_izright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object par_iz = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cont_graphleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cont_graphright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArbolSintactico cont_graph = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int execleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int execright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo_grafica2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tipo_grafica2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo_grafica2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int end1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int end1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object end1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int punto_coma1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int punto_coma1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object punto_coma1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int par_deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int par_deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object par_de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int end2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int end2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int punto_coma2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_coma2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object punto_coma2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico declaracion = new ArbolSintactico("Declaracion Grafica");
    declaracion.AgregarHijo(new ArbolSintactico(tipo_grafica1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(par_iz.toString()));
    declaracion.AgregarHijo(cont_graph);
    declaracion.AgregarHijo(new ArbolSintactico(exec.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(tipo_grafica2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(end1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma1.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(par_de.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(end2.toString()));
    declaracion.AgregarHijo(new ArbolSintactico(punto_coma2.toString()));
    RESULT = declaracion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenido_grafica ::= contenido_grafica valor_grafica 
            {
              ArbolSintactico RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArbolSintactico lista = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico valor_g = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido_grafica= new ArbolSintactico("Lista Grafica");
    contenido_grafica.AgregarHijo(lista);
    contenido_grafica.AgregarHijo(valor_g);
    RESULT = contenido_grafica;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_grafica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contenido_grafica ::= valor_grafica 
            {
              ArbolSintactico RESULT =null;
		int valor_gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArbolSintactico valor_g = (ArbolSintactico)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    ArbolSintactico contenido_grafica= new ArbolSintactico("Lista Grafica");
    contenido_grafica.AgregarHijo(valor_g);
    RESULT = contenido_grafica;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido_grafica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
